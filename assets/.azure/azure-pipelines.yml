trigger:
  branches:
    include:
      - main
      - stage
      - sprint/*

variables:
  vmImageName: 'ubuntu-latest'
  rootFolder: $(System.DefaultWorkingDirectory)
  phpVersion: 8.2
  nodeVersion: 20

stages:
  - stage: Build
    displayName: Build source
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              sudo apt-get update
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php$(phpVersion) php$(phpVersion)-{cli,common,mysql,zip,intl,gd,mbstring,curl,xml,bcmath,xdebug}
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -v
            displayName: 'Install PHP $(phpVersion) and Xdebug on Ubuntu'

          - script: composer validate --no-check-publish
            workingDirectory: $(rootFolder)
            displayName: 'Composer validate'

          - script: composer install --prefer-dist --no-progress --optimize-autoloader
            workingDirectory: $(rootFolder)
            displayName: 'Composer install'

          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: 'Install Node.js'

          - script: |
              yarn install
              yarn build
            displayName: 'Yarn install and build'

          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: '$(rootFolder)'
              Contents: |
                **/*
                !.git/**
                !node_modules/**
                !var/cache/dev/**
                !var/log/*.log
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/Build-$(Build.SourceBranchName)-$(Build.BuildId).zip
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: 'Upload build'
            inputs:
              targetPath:
                $(Build.ArtifactStagingDirectory)/Build-$(Build.SourceBranchName)-$(Build.BuildId).zip
              artifactName:
                drop

  - stage: Security
    displayName: Check security
    dependsOn: Build
    jobs:
      - job: security_check
        displayName: 'Dependencies security check'
        steps:
          - checkout: none

          - script: |
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            displayName: 'Use PHP version $(phpVersion)'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download package'
            inputs:
              artifactName: drop
              path: $(System.ArtifactsDirectory)

          - task: ExtractFiles@1
            displayName: 'Extract files'
            inputs:
              archiveFilePatterns: '$(System.ArtifactsDirectory)/Build-$(Build.SourceBranchName)-$(Build.BuildId).zip'
              destinationFolder: '$(rootFolder)'
              cleanDestinationFolder: true

          - script: curl -sS https://get.symfony.com/cli/installer | bash
            displayName: 'Install SymfonyCLI'

          - script: mv /home/vsts/.symfony5/bin/symfony /usr/local/bin/symfony
            displayName: 'SymfonyCLI Global'

          - script: symfony check:security
            displayName: 'Security checker'

  - stage: CodingStandards
    displayName: Check coding standards
    dependsOn: Build
    jobs:
      - job: coding_standards
        displayName: 'Coding standards check'
        steps:
          - checkout: none

          - script: |
              sudo apt-get update
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php$(phpVersion) php$(phpVersion)-{cli,common,mysql,zip,intl,gd,mbstring,curl,xml,bcmath,xdebug}
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -v
            displayName: 'Install PHP $(phpVersion) and Xdebug on Ubuntu'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download package'
            inputs:
              artifactName: drop
              path: $(System.ArtifactsDirectory)

          - task: ExtractFiles@1
            displayName: 'Extract files'
            inputs:
              archiveFilePatterns: '$(System.ArtifactsDirectory)/Build-$(Build.SourceBranchName)-$(Build.BuildId).zip'
              destinationFolder: '$(rootFolder)'
              cleanDestinationFolder: true

          - script: curl -sS https://get.symfony.com/cli/installer | bash
            displayName: 'Install SymfonyCLI'

          - script: mv /home/vsts/.symfony5/bin/symfony /usr/local/bin/symfony
            displayName: 'SymfonyCLI Global'

          - script: make docker-redis-up
            displayName: 'Start redis service [Docker]'

          - script: make docker-wait-redis
            displayName: 'Wait for services [Docker]'

          - script: symfony console cache:warmup
            displayName: 'Warmup cache'

          - script: make php-cs
            displayName: 'Run php_codesniffer with PSR12 standard'

          - script: make php-mess
            displayName: 'Run PHP Mess Detector'

          - script: make php-stan
            displayName: 'Run PHPStan'

          - script: make php-insights
            displayName: 'Run PHP Insights'


      - job: linters
        displayName: 'Linters check'
        steps:
          - checkout: none

          - script: |
              sudo apt-get update
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php$(phpVersion) php$(phpVersion)-{cli,common,mysql,zip,intl,gd,mbstring,curl,xml,bcmath,xdebug}
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -v
            displayName: 'Install PHP $(phpVersion) and Xdebug on Ubuntu'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download package'
            inputs:
              artifactName: drop
              path: $(System.ArtifactsDirectory)

          - task: ExtractFiles@1
            displayName: 'Extract files'
            inputs:
              archiveFilePatterns: '$(System.ArtifactsDirectory)/Build-$(Build.SourceBranchName)-$(Build.BuildId).zip'
              destinationFolder: '$(rootFolder)'
              cleanDestinationFolder: true

          - script: curl -sS https://get.symfony.com/cli/installer | bash
            displayName: 'Install SymfonyCLI'

          - script: mv /home/vsts/.symfony5/bin/symfony /usr/local/bin/symfony
            displayName: 'SymfonyCLI Global'

          - script: make docker-redis-up
            displayName: 'Start redis service [Docker]'

          - script: make docker-wait-redis
            displayName: 'Wait for services [Docker]'

          - script: symfony console cache:warmup
            displayName: 'Warmup cache'

          - script: make lint-yaml
            displayName: 'Lint yaml files'

          - script: make lint-xliff
            displayName: 'Lint Xliff translations files'

          - script: make lint-container
            displayName: 'Lint container configuration files'

          - script: make lint-doctrine
            displayName: 'Lint doctrine configuration files'

          - script: make lint-composer
            displayName: 'Lint composer configuration files'

          - script: make lint-twig
            displayName: 'Lint twig files'

          - script: make lint-style
            displayName: 'Lint style files'

          - script: make lint-js
            displayName: 'Lint javascript files'

  - stage: Tests
    displayName: Run tests
    dependsOn: Build
    jobs:
      - job: testing
        displayName: 'Run tests suite'
        steps:
          - checkout: none

          - script: |
              sudo apt-get update
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php$(phpVersion) php$(phpVersion)-{cli,common,mysql,zip,intl,gd,mbstring,curl,xml,bcmath,xdebug}
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -v
            displayName: 'Install PHP $(phpVersion) and Xdebug on Ubuntu'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download package'
            inputs:
              artifactName: drop
              path: $(System.ArtifactsDirectory)

          - task: ExtractFiles@1
            displayName: 'Extract files'
            inputs:
              archiveFilePatterns: '$(System.ArtifactsDirectory)/Build-$(Build.SourceBranchName)-$(Build.BuildId).zip'
              destinationFolder: '$(rootFolder)'
              cleanDestinationFolder: true

          - script: curl -sS https://get.symfony.com/cli/installer | bash
            displayName: 'Install SymfonyCLI'

          - script: mv /home/vsts/.symfony5/bin/symfony /usr/local/bin/symfony
            displayName: 'SymfonyCLI Global'

          - script: make docker-database-up
            displayName: 'Start database service [Docker]'

          - script: make docker-redis-up
            displayName: 'Start redis service [Docker]'

          - script: make wait
            displayName: 'Wait for services [Docker]'

          - script: make db-fixtures env=test
            displayName: 'Load database fixtures'

          - script: make test-ci
            displayName: 'All Tests (unit & functional)'

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testRunner: 'JUnit'
              testResultsFiles: 'var/coverage/tests.xml'
              mergeTestResults: 'false'

          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage Results'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: ./var/coverage/coverage.xml
